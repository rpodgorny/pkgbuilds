#!/usr/bin/python

'''
Autometric.

Usage:
  autometric [options]

Options:
  --log-level DEBUG|INFO|WARNING|ERROR  Log level [default: INFO].
'''

__version__ = '0.9'


import sys
import subprocess
import os
import re
import time
import logging
import docopt


def logging_setup(level):
	logging.basicConfig(level=level)
#enddef


def get_metric(route):
	try:
		metric = int(re.search('metric (\w*)', route).groups()[0])
	except:
		metric = 0
	#endtry

	return metric
#enddef


def remove_metric(route):
	return re.sub('metric \w*', '', route).strip()
#enddef


def set_metric(route, metric):
	return '%s metric %d' % (remove_metric(route), metric)
#enddef


def get_default_routes():
	lines = subprocess.check_output('ip route', shell=True).decode().split('\n')
	for line in lines:
		line = line.strip()

		if not 'default' in line: continue

		yield line
	#endfor
#enddef


def test_route(route):
	r = route.replace('default', '8.8.8.8')
	r = set_metric(r, 0)

	subprocess.call('ip route add %s' % r, shell=True)

	if subprocess.call('/usr/bin/fping -r 0 8.8.8.8 >/dev/null', shell=True) == 0:
		ret = 1
	else:
		ret = 0
	#endif

	subprocess.call('ip route del %s' % r, shell=True)

	return ret
#enddef

def main():
	args = docopt.docopt(__doc__, version=__version__)

	log_level = args['--log-level']
	metric_mask = 10000
	functional_minimum = 600  # 10 minutes alive at least
	inverval = 30

	logging_setup(log_level)

	logging.info('autometric v%s' % __version__)

	if not os.path.isfile('/usr/bin/fping'):
		logging.critical('/usr/bin/fping not found!')
		return 1
	#endif

	functional_since = {}

	while 1:
		t = time.monotonic()

		routes = get_default_routes()

		logging.debug('routes: %s' % routes)

		for route in routes:
			if test_route(route):
				logging.debug('route "%s" functional' % route)

				if not route in functional_since:
					logging.info('route "%s" just got functional' % route)
					functional_since[route] = t
				#endif
			else:
				logging.debug('route "%s" non-functional' % route)

				if route in functional_since:
					logging.info('route "%s" just got non-functional' % route)
					del functional_since[route]
				#endif
			#endif
		#endfor

		logging.debug('functional_since: %s' % functional_since)

		for route in routes:
			metric = get_metric(route)
			new_metric = None

			if route in functional_since \
			and t - functional_since[route] > functional_minimum \
			and metric >= metric_mask:
				new_metric = metric % metric_mask
			elif metric < metric_mask:
				new_metric = metric + metric_mask
			#endif

			if not new_metric is None:
				logging.info('setting new route metric for "%s" to %d' % (route, new_metric))

				subprocess.call('ip route del %s' % route, shell=True)
				subprocess.call('ip route add %s' % set_metric(route, new_metric), shell=True)
			#endif
		#endfor

		logging.debug('going to sleep')
		time.sleep(inverval)
	#endwhile

	return 0
#enddef


if __name__ == '__main__':
	sys.exit(main())
#endif
